# Avoid duplicate pipelines due fact using rules
# https://docs.gitlab.com/ee/ci/jobs/job_rules.html#avoid-duplicate-pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

stages:
  - build
  - stan
  - test  
  - security
  - prepare
  - release
  - deployment

# TEMPLATE
# https://docs.gitlab.com/ee/ci/yaml/#yaml-anchors-and-aliases
# https://docs.gitlab.com/ci/yaml/yaml_optimization/#yaml-anchors-for-scripts
.php-job-template: &php-job-template
  cache: &cache-template
    key:
      files:
        - composer.lock
    paths:
      - vendor/
  image: $CI_REGISTRY_IMAGE/test:latest

build_image:
  stage: build
  services:
    - name: docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
    IMAGE_TAG: "test:latest"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export DOCKER_IMAGE="$CI_REGISTRY_IMAGE/$IMAGE_TAG"
    - |
      if ! docker manifest inspect $DOCKER_IMAGE >/dev/null 2>&1; then
        echo "Image does not exist, building..."
        docker build -t $DOCKER_IMAGE -f gitlab-ci/Dockerfile.test .
        docker push $DOCKER_IMAGE
      elif [ "$FORCE_REBUILD" = "true" ]; then
        echo "Changes detected. Forcing image rebuild..."
        docker build -t $DOCKER_IMAGE -f gitlab-ci/Dockerfile.test .
        docker push $DOCKER_IMAGE
      else
        echo "Image $DOCKER_IMAGE already exists, skipping build."
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - gitlab-ci/Dockerfile.test
          - .gitlab-ci.yml
      variables:
        FORCE_REBUILD: "true"
      when: always
    - exists:
        - gitlab-ci/Dockerfile.test

stan_job:
  <<: *php-job-template
  stage: stan
  script:
    - make phpstan-ci
  rules:
    - when: on_success

test_job:
  <<: *php-job-template
  stage: test
  script:
    - make test-ci
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: tmp/coverage/cobertura.xml
  rules:
    - when: on_success

sqlmap_security_test:
  stage: security
  tags:
    - docker-aoo
  services:
    - name: docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
    FF_NETWORK_PER_BUILD: "true"
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
    UID: "1000"
    GID: "1000"
    DB_NAME: "aoo4"
  before_script:
    - apk add --no-cache docker-compose make
  script:
    - make setup-ci-env
    - docker-compose up -d webserver mariadb-aoo4
    - docker-compose exec -T webserver make sqlmap-login
    - docker-compose exec -T webserver make sqlmap-register
    - docker cp PHP-AOO4-Local:/var/www/html/tmp/security ./tmp/ 2>/dev/null || true
  after_script:
    - docker-compose down -v || true
  artifacts:
    when: always
    paths:
      - tmp/security/
    expire_in: 1 week
  rules:
    - when: manual      
    - when: on_success 

prepare_job:
  stage: prepare
  image: alpine:latest
  rules:
  - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  script:
    - apk add bash git
    - ./scripts/generate-release-notes.sh > release_notes.md
  artifacts:
    paths:
    - release_notes.md

release-job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
  - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  script:
    - echo "Creating release"
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: 'Release $CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'
    description: release_notes.md

deploy-job-non-prod:
  stage: deployment
  image: alpine
  environment:
    name: dynamic-env/$CI_COMMIT_REF_NAME
    url: https://${ENV_DOMAIN_NAME}
  before_script:
    - apk add curl
  script:
    - curl ${CURL_OPTS} "${CI_ENVIRONMENT_URL}/admin/deploy.php?type=code&passphrase=${DEPLOY_KEY_PASS}&ci"
  rules:
    - if: $CI_COMMIT_REF_NAME == "staging" && $CI_MERGE_REQUEST_ID == null
    - if: $CI_COMMIT_REF_NAME == "saison-3" && $CI_MERGE_REQUEST_ID == null
